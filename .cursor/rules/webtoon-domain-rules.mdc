---
description: 웹툰 도메인 전용 개발 규칙 및 가이드라인
globs: src/app/(webtoon)/**/*,,public/webtoon/*
alwaysApply: false
---

# Requirement

- 월요일 오전 9시에 네이버 웹툰과 카카오 웹툰 API를 호출해 요일별 웹툰 정보를 가져온다. Github Action을 사용해 json 파일로 저장, github에 commit & push 한다.
- 화면의 중앙 하단부에는 원형의 톱니바퀴 버튼이 1/3만 노출된 형태로 표시되고 있다.
  - 톱니바퀴 버튼을 mouseDown > mousemove 한채로 마우스를 좌 또는 우로 드래그해 톱니바퀴를 돌릴 수 있다.
  - 모바일에서는 touchStart > touchMove 한채로 좌 또는 우로 드래그해 톱니바퀴를 돌릴 수 있다.
  - 톱니바퀴 버튼을 mouseup(또는 touchEnd) 하면 Webtoon CoverFlow 영역의 중앙에 배치될 요소의 index를 결정한다. (cardIndex)
  - 톱니바퀴 버튼을 mouseMove(또는 touchMove) 하는 동안, 직전 이벤트와 0.1초(100ms) 이내의 시간 간격으로 X축 절대값 100px 이상의 속도(Velocity)로 움직이면 "fast" 상태로 인지한다. (평상시엔 "normal" 상태) "fast" 상태가 되면 cardIndex를 0으로 초기화한다.
  - 화면 중앙에는 웹툰 정보가 json 파일로 저장되어 파일 내 이미지를 3D 원형 커버 플로우(Cover Flow) UI로 표시한다.
  - 이 UI는 3D 퍼스펙티브(perspective)를 가지며, 중앙의 카드(현재 cardIndex에 해당)가 가장 크고(scale 1) 정면에 표시된다.
    중앙 카드 양옆의 카드들은 마치 원형 궤도를 따라 배치된 것처럼, 중앙에서 멀어질수록 점차 작아지고(scale < 1) 뒤로 물러나며(translateZ) 살짝 안쪽으로 회전(rotateY)된 형태로 표시된다.
    커버 플로우 UI는 모바일은 3개(중앙 1, 좌/우 1개씩), 그 외의 화면(태블릿, 데스크탑)에선 5개(중앙 1, 좌/우 2개씩)의 카드를 표시한다.
  - 커버 플로우 UI의 카드 중 중앙의 카드만 특별하게 hover 가능한 카드이다.
  - 카드의 앞면은 두 빛이 카드를 가운데 두고 빙글빙글 도는 형태로 동작한다. (이미 구현되어 있음, font-side 참조)
  - 카드의 앞면을 hover시 카드가 Y축으로 180도 회전한다.
  - 카드의 뒷면은 웹툰의 플랫폼, 요일, 제목, 작가 정보가 표시되며 웹툰 사이트로 이동하는 링크를 표시한다.
  - 모바일 화면에서는 hover 상호작용 대신 클릭 이벤트로 카드를 뒤집는다.
    - 중앙 카드의 앞면을 클릭하면 뒷면으로 뒤집힌다.
    - 뒤집힌 상태에서 뒷면을 다시 클릭하면 앞면으로 뒤집힌다.
    - 카드가 뒤집힌 상태에서 톱니바퀴를 돌리면 카드는 자동으로 앞면으로 뒤집힌다.
    - 데스크톱/태블릿 화면에서는 기존대로 hover로 카드 뒤집기를 처리한다.
  - 톱니바퀴를 mouseDown > mousemove(또는 touchStart > touchMove) 하는 동안은 hover 할 수 없고, 두 빛이 빙글빙글 도는 효과도 제거된다.
- 톱니바퀴를 mouseDown > mousemove(또는 touchStart > touchMove) 하는 동안 커버플로우는 회전하는 것처럼 보인다.
  - 톱니바퀴를 좌측으로 드래그(xDistance 감소)하면 커버플로우는 좌측으로 회전하고 좌측으로 드래그(xDistance 증가)하면 우측으로 회전한다.
  - 톱니바퀴를 좌측으로 드래그(xDistance 감소)하면 커버플로우는 좌측으로 회전하게 되고 왼쪽의 카드로 갈수록 카드가 점점 작아지고, 기울어진다.
- 톱니바퀴를 mouseup(또는 touchEnd) 하면 최종 cardIndex가 확정되고, 커버플로우 UI의 중앙 카드가 고정된다.
- 톱니바퀴를 빠르게 돌려 "fast" 상태가 되면 1초 동안 커버 플로우 UI의 모든 카드가 스켈레톤 UI로 표시된다. 이후 웹툰 목록을 랜덤하게 다시 셔플하여 표시한다.

# Implementation Detail

- scripts/scrape-webtoon/main.ts에 웹툰 API를 호출해 요일별 웹툰 정보를 가져오는 코드를 정의, Github Action에서 사용한다.
  - scripts/scrape-webtoon/services.ts에서 각 서비스(Naver, Kakao)별 API 로직을 정의한다.
  - json 파일로 github에 commit & push된 파일은 webtoon/webtoons.json 위치에 저장한다.
  ```
    {
        "lastUpdated": string,
        "webtoons": [
            {
            "id": number,
            "title": string,
            "author": string,
            "dayOfWeek": string,
            "link": string,
            "thumbnail": string,
            "platform": "naver" | "kakao"
            },
        ]
    }
  ```
- 웹툰 페이지는 서버 컴포넌트로 작성한다. API route를 사용하여 fs 모듈로 webtoon/webtoons.json를 읽어들이고 데이터를 셔플해 반환한다.
- WheelProvider 내에서 톱니바퀴 버튼과 관련된 상태를 관리하려 한다.
  - isDragging, X축으로 움직인 거리(xDistance), cardIndex, rotationOffset
  - 톱니바퀴 버튼을 mousemove(또는 touchMove) 한채 0.1초 안에 X축으로 절대 값 100px 이상의 속도로 움직였는지 확인하는 로직 ("fast", "normal" 판별)
  - 터치 이벤트 지원: WheelButton 컴포넌트에서 touchStart, touchMove, touchEnd 이벤트 핸들러를 추가한다.
    - touchStart: mouseDown과 동일한 로직 실행 (e.touches[0].clientX로 X좌표 추출)
    - touchMove: mousemove와 동일한 로직 실행 (e.touches[0].clientX로 X좌표 추출, 속도 감지 포함)
    - touchEnd: mouseup과 동일한 로직 실행 (rotationOffset 반올림, cardIndex 확정)
    - 터치 이벤트 핸들러는 preventDefault()를 호출하여 기본 스크롤 동작을 방지한다.
  - CRITICAL: mouseDown > mousemove(또는 touchStart > touchMove) 하는 동안 커버플로우는 부드럽게 회전해야 한다.
    - mousemove(또는 touchMove) 이벤트마다 xDistance 기반으로 rotationOffset을 실시간 계산: xDistance / 45 (소수점 포함)
    - rotationOffset은 커버플로우의 부드러운 회전을 위해 사용되며, 카드들의 transform (translateX, translateY, translateZ) 값이 rotationOffset에 따라 연속적으로 변화한다.
    - 톱니바퀴를 우측으로 드래그(xDistance 증가)하면 rotationOffset이 증가하고, 커버플로우가 우측으로 회전한다.
    - 톱니바퀴를 좌측으로 드래그(xDistance 감소)하면 rotationOffset이 감소하고, 커버플로우가 좌측으로 회전한다.
    - WebtoonCoverFlow 컴포넌트는 드래그 중에 rotationOffset을 기준으로 카드 위치를 계산하여 부드러운 회전 효과를 구현한다.
    - 단, "fast" 상태일 때는 cardIndex를 0으로 고정하고 웹툰 재셔플 로직을 실행한다.
  - mouseup(또는 touchEnd) 시에만 rotationOffset을 Math.round하여 최종 cardIndex를 확정한다.
    - cardIndex = Math.round(rotationOffset)
    - cardIndex가 0보다 작을 경우: (cardIndex % webtoons.length + webtoons.length) % webtoons.length
    - cardIndex가 webtoons.length보다 큰 경우: cardIndex % webtoons.length
  - 중요: 톱니바퀴의 회전(xDistance deg)은 시각적 효과일 뿐, 실제 커버플로우 회전은 rotationOffset 값으로 이루어지고, 최종 확정은 cardIndex 상태로 이루어진다.
  - 스켈레톤 UI는 react-loading-skeleton 라이브러리를 활용한다.
  - 톱니바퀴 버튼 우클릭 기능을 제한한다.
- 모바일 화면 판단 및 카드 뒤집기 처리:
  - src/hooks 폴더에 use-is-mobile.ts 커스텀 훅을 생성한다.
  - window.matchMedia를 사용하여 모바일 화면인지 판단한다. (모바일 기준: max-width: 768px)
  - isMobile 값을 반환하며, 화면 크기 변경 시 실시간으로 업데이트된다.
  - WebtoonCard 컴포넌트에서 use-is-mobile 훅을 사용한다.
  - 모바일 화면(isMobile === true)일 때:
    - hover 이벤트를 비활성화한다.
    - 중앙 카드 클릭 시 rotationY 각도 값을 180도씩 증가시킨다.
    - rotationY 값을 inline style로 적용하여 Y축 회전을 구현한다. (transform: rotateY(${rotationY}deg))
    - 카드는 항상 같은 방향으로 회전하여 자연스러운 뒤집기 효과를 제공한다.
    - rotationY가 360도 이상이 되어도 CSS가 자동으로 처리하므로 값을 초기화하지 않는다.
    - WheelProvider의 isDragging 상태가 true로 변경되면 rotationY를 0으로 초기화한다.
  - 데스크톱/태블릿 화면(isMobile === false)일 때:
    - 기존 hover 이벤트를 유지한다.
    - 클릭 이벤트는 비활성화한다.

# Constraint

- 웹툰 커버플로우 UI 구현시 외부 슬라이드 라이브러리를 사용하지 않고 JS, Tailwind CSS, CSS in JS를 이용하여 직접 구현한다.
- 클라이언트 전역 상태 관리 라이브러리를 도입하지 않고 필요하다면 contextAPI를 사용한다.

# Acceptance Tests

- Github Action 스크립트(scripts/scrape-webtoon/main.ts)가 매일 오전 9시에 성공적으로 실행된다.
- 실행 후 webtoon/webtoons.json 파일이 Implementation Detail에 정의된 JSON 형식에 맞게 github에 정상적으로 commit & push 된다.
- (수동) 톱니바퀴 버튼을 좌우로 드래그하는 동안 커버플로우가 실시간으로 회전하며 중앙 카드가 즉시 변경된다. mouseup 시 최종 위치에서 멈춘다.
- (수동) 모바일에서 톱니바퀴 버튼을 터치하여 좌우로 드래그하는 동안 커버플로우가 실시간으로 회전하며 중앙 카드가 즉시 변경된다. touchEnd 시 최종 위치에서 멈춘다.
- (수동) 모바일에서 톱니바퀴를 빠르게(fast 상태 기준) 터치 드래그하면 1초간 스켈레톤 UI가 표시된 후, 웹툰 목록이 랜덤하게 재배치된다.
- (수동) 모바일에서 톱니바퀴를 터치 드래그하는 동안 페이지 스크롤이 발생하지 않는다.
- (수동) 데스크톱/태블릿 화면에서 커버 플로우 중앙에 위치한 카드를 hover하면 카드가 뒤집히며 뒷면의 정보(플랫폼, 요일, 제목, 작가, 링크)가 표시된다.
- (수동) 모바일 화면에서 중앙 카드를 클릭하면 카드가 Y축으로 180도 회전하여 뒷면으로 뒤집히고, 다시 클릭하면 Y축으로 추가로 180도 회전(총 360도)하여 앞면으로 뒤집힌다. 카드는 항상 같은 방향으로 회전한다.
- (수동) 모바일 화면에서 카드가 뒤집힌 상태로 톱니바퀴를 돌리면 카드가 자동으로 앞면으로 초기화(rotationY: 0)된다.
- (수동) 톱니바퀴 버튼을 빠르게(fast 상태 기준) 돌리면 1초간 스켈레톤 UI가 표시된 후, 웹툰 목록이 랜덤하게 재배치된다.
- (수동) 톱니바퀴를 드래그하는 동안에는 중앙 카드를 hover해도 뒤집히지 않으며, 빛나는 효과도 사라진다.
